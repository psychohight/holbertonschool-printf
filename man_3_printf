.\"" _printf man page

.TH man 3 "28 march 2024" "1.0" "_printf man page"

.SH NAME

_printf - print formatted

.SH SYNOPSIS

#include "main.h" ||
int _printf(const char *format, ...)

.SH DESCRIPTION FUNCTION

Printf is a standard C library function used for formatted output.
It stands for "print formatted" and is designed to display information 
on the console or write it to a file in a specific, well-formatted way.
Our function _printf() produce output according to a format as described below.  
The function _printf() write output to stdout, the standard output stream.
Our function write the output under the control of a format string that specifies
how subsequent arguments (or arguments accessed via the variable-length argument
facilities of stdarg(3)) are converted for output.

.SH DESCRIPTION ARGUMENT
@format: string that specifies the format of the output. 
It can contain format specifiers starting with "%" and followed by conversion 
characters (for example, %d for integers,, %s for strings, etc...).
@...: The ellipsis represents a variable number of arguments that match format 
specifiers in the format string. These arguments provide the values to form and print.
    
.SH FORMAT OF THE FORMAT STRING 
The format string is a character string, starting and ending in its initial 
offset state, if any. The format string consists of zero or more directives:
ordinary characters (no "%"), which are faithfully copied into the output stream, 
and conversion specifications, each resulting in the retrieval of zero or more 
subsequent arguments. Each conversion specification is introduced by the "%" 
character and ends with a conversion specifier.
The syntax of a conversion specification is:
        -%[conversion specifier]
The arguments must correspond properly (after type promotion) with the conversion 
specifier.  By default, the arguments are used in the order given, where each 
conversion specifier asks for the next  argument (and it is an error if insufficiently 
many arguments are given)

.SH CONVERSION SPECIFIERS
A character that specifies the type of conversion to be applied. The conversion 
specifiers and their meanings are:
    
    c
        The "%c" format specifier, is used to display a only character and specify where 
        a character should be inserted into the format string. When you use "%c" in the 
        format string, you must provide an additional argument that represents the value 
        of the character to display.
        An "int" argument it is will be converted to an unsigned char, and the resulting 
        ASCII character is written.


    s
        The "%s" format specifier is used to display a character string and specify 
        where the string should be inserted into the format string. When you use "%s" 
        in the format string, you must provide an additional argument that contain the 
        memory adress where of the string is stocked, for can display. You can use "%s" 
        to print the contents of any string, whether it is a static string or a dynamically 
        allocated dynamic string. The argument is expected to be a pointer to an array of 
        character type (pointer to a string).  Characters from the array are written up to 
        (but not including) a terminating null byte ('\0'). The array must contain a 
        terminating null character.
    
    %
        The "%%" format specifier used to display the character "%" and specify where 
        the chararacter should be inserted into the format string. No argument is converted. 
        The complete conversion specification is "%%", for indicated intentionnaly of not 
        interpreting it as the start of a format specifier but well for print the character literally.

    d, i
       The "%d" and "%i" format specifiers, are used to display integer values 
       (whole numbers) and specify where the value should be inserted into the format 
       string. When you use "%d" or "%i" in the format string, you must provide an additional 
       argument that represents the value of the character to display. These specifiers 
       are interchangeable, meaning that "%d" and "%i" can be used interchangeably to 
       display integer values. The "int" argument is converted to signed decimal notation.

.SH RETURN VALUE

    Upon successful return, this function return the number of characters printed 
    (excluding the null byte used to end output to  strings).
    If an output error is encountered, a negative value is returned.

.SH EXAMPLE

#include "main.h"

int main(void) 
{
    // Basic use of _printf
    _printf("Hello everyone!\n");

    // Using _printf with variables
    int entier = 123;
    char caractere = 'A';

    _printf("Entier : %d\n", entier);
    _printf("Caractere : %c\n", caractere);
    _printf("String : %s\n", "i'm a string");
    _printf("Percent : %%\n");
    
    return 0;
}

.SH AUTHOR